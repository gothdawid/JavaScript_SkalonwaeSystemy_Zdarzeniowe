openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  #- url: http://localhost:8000       
  - url: http://localhost:27017       
paths:
  /author:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create new author
      operationId: createAuthor
      tags:
        - author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /author/{id}:
    get:
      summary: Get author by id
      operationId: getAuthorById
      tags:
        - author
      parameters:
        - name: id
          in: path
          description: ID of author to return
          required: true
          schema:
            type: string
            example: 6420adedae56a4f2b475ab90
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update author by id
      operationId: updateAuthorById
      tags:
        - author
      parameters:
        - name: id
          in: path
          description: ID of author to update
          required: true
          schema:
            type: string
            example: 6420adedae56a4f2b475ab90
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                age:
                  type: integer
                  example: 30
              
             
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete author by id
      operationId: deleteAuthorById
      tags:
        - author
      parameters:
        - name: id
          in: path
          description: ID of author to delete
          required: true
          schema:
            type: string
            example: 6420adedae56a4f2b475ab90
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /book:
    get:
      summary: Get all books
      operationId: getBooks
      tags:
        - book
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create new book
      operationId: createBook
      tags:
        - book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /book/{id}:
    get:
      summary: Get book by id
      operationId: getBookById
      tags:
        - book
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          schema:
            type: string
            example: 642608819ed43ef17181b95e
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update book by id
      operationId: updateBookById
      tags:
        - book
      parameters:
        - name: id
          in: path
          description: ID of book to update
          required: true
          schema:
            type: string
            example: 642608819ed43ef17181b95e
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete book by id
      operationId: deleteBookById
      tags:
        - book
      parameters:
        - name: id
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: string
            example: 642608819ed43ef17181b95e
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
components:
  schemas:
    Book:
      required:
        - title
        - year
        - author
      type: object
      properties:
        title:
          type: string
          example: Przykladowy tytu≈Ç
        year:
          type: integer
          format: int32
          example: 2022
        author:
          type: string
          example: 642608819ed43ef17181b95e
    Author:
      required:
        - firstName
        - lastName
        - age
      type: object
      properties:
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
        age:
          type: integer
          format: int32
          example: 22
        Books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
